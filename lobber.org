# lobber.org (in Emacs -*- org -*- mode)

* What
Project notes about 'lobber', a closed BitTorrent tracker and
torrent index for the Nordic NREN's, operated by NORDUnet.
* Terms used in this document
- Shared file -- one or more files a user wants to share with other people
- Torrent -- a file with information about i) the file that is shared
  and ii) the URL of the tracker.
* Requirements
** Functional
- A web page for uploading torrents (HTTP PUT/POST client->server)
  - Uploading a torrent requires WebSSO (+oauth?) authentication
    - Do we need authorization or can all authenticated users upload?
- A web page listing and serving torrents (HTTP GET server->client)
  - Access to the list of torrents requires WebSSO (+oauth?)
    authentication
  - There shall be an RSS/Atom feed with available torrents
- A running BiTorrent tracker ([[http://erdgeist.org/arts/software/opentracker/][opentracker]] has been suggested)
- Anybody that has the torrent file may download the shared file
** Performance
- At least [x] torrent uploads per [time unit]
- At least [x] torrents served per [time unit]
- At least [x] torrents hosted on the server
- At least 100k simultaneous bittorrent _users_, whatever that means
  for the tracker (FIXME: find some numbers)
* Design
** Closing down opentracker
Do we need to close down the tracker to avoid people using it?  I
think so.  The way of doing this is to compile with
WANT_ACCESSLIST_WHITE and then update a whitelist file on the tracker
server (20 bytes) for each new torrent and SIGHUP the tracker.

- How many times per second can we do that and with how big a file
  before it becomes unfeasable?

- How do we remove entries from the whitelist file?

- How would this work with clusters of trackers?
** Alternative whitelist implementation
*** Requirements
- few readers
- few writers
- all on separate hosts
- search speed is paramount
- write speed is [subordinate]
*** Contenders
- DYI hash table (-networking, +simple)
- DYI b-tree
- BerkleyDB + some DYI networking
- filesystem, webdav, httpd caching (much like hash table)
- [[http://1978th.net/tokyocabinet/][TokioCabinet]] (-networking, +simple) pretty much the same as the DIY
  alternatives w/o writing the low level stuff, good
- [[http://couchdb.apache.org/][CouchDB]] -- HTTP, JSON
- [[http://incubator.apache.org/cassandra/][Cassandra]] ([[http://en.wikipedia.org/wiki/Cassandra_%28database%29][@wikipedia]]) -- might be too heavy ("ColumnFamily-based
  data model richer than typical key/value systems")
- Redis
- MongoDB
- Hypertable
** Data model
*** Take 1
- The central object is an upload object (Upload) which has data and
  may have meta data (Metadata).
  - An Upload is created from data (the shared file(s)), a torrent
    file or perhaps something else.
  - An Upload has a TTL.
- An upload object can have zero or more upload access objects
  (Access) associated to it.
*** Take 2 <2009-12-02 Wed>
(type 'resource
  (name :text)     
  (description :text :optional)
  (owner :user)
  (acl :acl :optional)  ; default: no access
  (file :file :optional)  ; present => resource represents a torrent file
  (next :resource :optional)) ; present => res. repr. a tag

(type 'handle
  (secret :text)
  (expiration :date)
  (resource :resource))

(type 'user)
  (name :text :unique))

(type 'acl       ; first match
  (id :user)
  (permisssions :int))  ; two bits -- read and write
*** Take 3 <2009-12-11 Fri>
See [[file:src/lobber/share/models.py][file:~/p/lobber/src/lobber/share/models.py]] for data model.
Some terminology:
- There are three representations: torrent, rss and html.  Suffixing
  an object name (i.e. an instance) in a URL with a dot and one of the
  representations will result in the object (instance) being returned
  in this specific form
- There are four object types: torrrent, tag, user and key.
- There are four object operations: get, list, new and del.  Apart
  from the user object type, all four operations are valid on all four
  object types.  For user objects, only get and list are valid.
- The canonical form of a URL is
    https://HOST.DOMAIN.TLD/APPLICATION/SECRET/OBJECT/INSTANCE.REPRESENTATION
- Note that a URL with a secret, used for "API calls", has the secret
  prepended to the object type, like
  https://.../aec070645fe53ee3b3763059376134f058cc337247c978add178b6ccdfb0019f/tag/ndn.rss
- URL secrets are (probably) the sha256 sum of some decently random value.
- Here's an example of how URL's map to database queries
  - wget https://.../secret0/torrent/foo.torrent ==>
    - select from torrent where owner=< secret0->owner > and name="foo"
- An ACL is associated with a user via a key.  Anyone who knows the
  secret in the key will be able to act on behalf of that user.  The
  ACL consists of regular expressions denoting which actions are
  allowed.  First match wins.

  ACL -- key -- user
                 /\
                /  \
              tag  torrent

  - A key has zero or one ACL.
  - An ACL has one or more keys.
  - A key has one owner (user).
  - A user has zero or more keys.
  - A user has zero or more torrents and tags.
  - A torrent has one owner (user).
  - A torrent has zero or more tags.
  - A tag has one owner (user).
  - A tag has zero or more torrents.
- Requests from a user with an HTTP session (cookie) is treated as if
  the request had contained a secret for a key tied to the logged in
  user with an ACL containing one entry with the value of ".*".
** Web
*** Upload torrent
File: [input, path to file]
Share: [check box, default true]
Name: [input, text, optional]
Upload: [button] ==> Torrent uploaded
*** Torrent uploaded
Your torrent has been uploaded [and shared].
Your torrent: [URL] ==> Admin torrent
*** Admin torrent
TODO
*** List published torrents

* Notes
** NRKbeta and opentracker
http://search.cpan.org/dist/WWW-Opentracker-Stats/
** Playing with torrent files
On nordushare-dev, the 'bittorrent' package was installed.
*** make a torrent file
  btmakemetafile vmlinuz http://nordushare-dev.nordu.net:4711/announce
*** view a torrent file
linus@nordushare-dev:~/tmp$ btshowmetainfo vmlinuz.torrent /usr/bin/btshowmetainfo:8: DeprecationWarning: the sha module is deprecated; use the hashlib module instead
  from sha import *
btshowmetainfo 20021207 - decode BitTorrent metainfo files

metainfo file.: vmlinuz.torrent
info hash.....: fd5c5211671b261b289dfe12a1d657b898b75902
file name.....: vmlinuz
file size.....: 3907424 (14 * 262144 + 237408)
announce url..: http://nordushare-dev.nordu.net:4711/announce

** Check out
- that bit in torrents the DHT article was talking about
* Progress [4/8]
** Needed for demo 2009-12-18
- [X] Working tracker running
- [X] Dummy page in Django
- [X] List of public, non expired torrents on start page
- Uploading torrent file
  - [X] Torrent and one Handle object is created in database
  - [X] File lands on disk
  - [ ] Whitelist is updated and HUP is sent to tracker
- [X] Client is running, seeding everything in database (that hasn't expired)
- [ ] _Some_ authentication
- [ ] Tracker sends 4xx rather than 5xx on "not allowed"
- [ ] Save torrent files named as the hash of the torrent, present them in
      web as what was typed in as "name" (content-disposition?)
- [ ] Send mail with links on handle creation
*** Use cases for demo
**** UC1 -- web usage
0. [user0] generates a torrent file and starts seeding it
1. [user0] logs in ==> "my torrents" view (w/ an upload widget)
2. [user0] uploads a torrent file, adds an email address ==> mail is sent
3. [user1] clicks the direct torrent link in mail from (2) ==> gets the torrent
4. [user1] clicks the web link in mail from (2) ==> "a torrent" view
**** UC2 -- api usage
0. [user0] gets himself a "longlived cookie" [cookie0]
1. [user0] uses [cookie0] to upload a torrent using wget/curl
**** UC3 -- adding a seeder
0. admin adds an ACL to tag ":all" with read permissions for [user0]
1. admin creates a new handle for tag ":all" and sends its secret,
   [secret0], to [user0]
2. user0 starts a bt-client and points it at http://.../feed/secret0/
** For 0.1, after 2009-12-16
- [ ] Proper DNS names
- [ ] Old torrent files are removed, from index (i.e. web page) and from whitelist
- [ ] Proper Apache in front of Django
- [ ] Federated identity
* Questions
- Should we flag the torrents as private?
* Flow
** User fills in a web form
- lobber/share/urls.py
- lobber/share/views.py (req.method != 'POST')
  render_to_response(SOME-FILE.html, lobber.share.forms.SOME-FORM)
- templ/share/SOME-FILE.html
  action=SOME-ACTION
- lobber/share/urls.py
- lobber/share/views.py (req.method == 'POST')
  if lobber.share.forms.SOME-FORM().is_valid():
     
  
