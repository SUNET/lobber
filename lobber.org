# lobber.org (in Emacs -*- org -*- mode)

* What
Project notes about 'lobber', a closed BitTorrent tracker and
torrent index for the Nordic NREN's, operated by NORDUnet.
* Terms used in this document
- Shared file -- one or more files a user wants to share with other people
- Torrent -- a file with information about i) the file that is shared
  and ii) the URL of the tracker.
* Requirements
** Functional
- A web page for uploading torrents (HTTP PUT/POST client->server)
  - Uploading a torrent requires WebSSO (+oauth?) authentication
    - Do we need authorization or can all authenticated users upload?
- A web page listing and serving torrents (HTTP GET server->client)
  - Access to the list of torrents requires WebSSO (+oauth?)
    authentication
  - There shall be an RSS/Atom feed with available torrents
- A running BiTorrent tracker ([[http://erdgeist.org/arts/software/opentracker/][opentracker]] has been suggested)
- Anybody that has the torrent file may download the shared file
** Performance
- At least [x] torrent uploads per [time unit]
- At least [x] torrents served per [time unit]
- At least [x] torrents hosted on the server
- At least 100k simultaneous bittorrent _users_, whatever that means
  for the tracker (FIXME: find some numbers)
* Design
** Closing down opentracker
Do we need to close down the tracker to avoid people using it?  I
think so.  The way of doing this is to compile with
WANT_ACCESSLIST_WHITE and then update a whitelist file on the tracker
server (20 bytes) for each new torrent and SIGHUP the tracker.

- How many times per second can we do that and with how big a file
  before it becomes unfeasable?

- How do we remove entries from the whitelist file?

- How would this work with clusters of trackers?
** Alternative whitelist implementation
*** Requirements
- few readers
- few writers
- all on separate hosts
- search speed is paramount
- write speed is [subordinate]
*** Contenders
- DYI hash table (-networking, +simple)
- DYI b-tree
- BerkleyDB + some DYI networking
- filesystem, webdav, httpd caching (much like hash table)
- [[http://1978th.net/tokyocabinet/][TokioCabinet]] (-networking, +simple) pretty much the same as the DIY
  alternatives w/o writing the low level stuff, good
- [[http://couchdb.apache.org/][CouchDB]] -- HTTP, JSON
- [[http://incubator.apache.org/cassandra/][Cassandra]] ([[http://en.wikipedia.org/wiki/Cassandra_%28database%29][@wikipedia]]) -- might be too heavy ("ColumnFamily-based
  data model richer than typical key/value systems")
- Redis
- MongoDB
- Hypertable
** Data model
*** Take 1
- The central object is an upload object (Upload) which has data and
  may have meta data (Metadata).
  - An Upload is created from data (the shared file(s)), a torrent
    file or perhaps something else.
  - An Upload has a TTL.
- An upload object can have zero or more upload access objects
  (Access) associated to it.
*** Take 2 <2009-12-02 Wed>
#+BEGIN_EXAMPLE
(type 'resource
  (name :text)     
  (description :text :optional)
  (owner :user)
  (acl :acl :optional)  ; default: no access
  (file :file :optional)  ; present => resource represents a torrent file
  (next :resource :optional)) ; present => res. repr. a tag

(type 'handle
  (secret :text)
  (expiration :date)
  (resource :resource))

(type 'user)
  (name :text :unique))

(type 'acl       ; first match
  (id :user)
  (permisssions :int))  ; two bits -- read and write
#+END_EXAMPLE
*** Take 3 <2009-12-11 Fri> and 4 <2010-02-27 Sat>
See [[file:src/lobber/share/models.py][file:~/p/nordushare/lobber/src/lobber/share/models.py]] for data model.

- There are four object types: torrrent, tag, user and key.

- There are five object operations: get, list, create, update and
  delete.

  Except for the user object type, all operations are valid on all
  object types.  For user objects, only get is valid (i.e. we don't
  expose user management in the API).

- The canonical form of a URL is

  https://HOST.DOMAIN.TLD/APPLICATION/OBJECT-TYPE/[INSTANCE][.REPRESENTATION]][?lkey=SECRET]


  | instance / request method | GET  | POST/PUT | DELETE |
  |---------------------------+------+----------+--------|
  | no instance given         | list | create   | -      |
  | instance given            | get  | update   | delete |
  |---------------------------+------+----------+--------|

- There are four representations: raw, json, html and rss.

  Suffixing an object name (i.e. an instance or operation) in a URL
  with a dot and one of the representations will result in the
  object(s) being returned in this specific form.

  Another way for a client to specify representation is to use the
  HTTP Accept request-header [RFC2616 section 14.1].

  URL suffixes take precedence over Accept headers so that the user
  might be able to override the behaviour of an application.

  If the representation is missing, it's up to the object
  implementation to pick a suitable representation.

- The text representation of a key (the URL secret) is the sha256 sum
  of some decently random value.

  (We might want to use sha1 instead to get the length of the secret
  down from 64 to 40 characters but I don't know really.)

- Examples of how URL's map to database queries.
  - wget https://.../torrent/foo.torrent?lobberkey=secret0 ==>
    - select from torrent where owner=<secret0->owner> and name="foo"

- An access control list (ACL) is associated with a torrent.

  The ACL consists of pairs of regular expressions and permissions (r,
  w, d).

- A key has constraints and entitlements.

  Anyone who knows the secret in a key will be able to act as if s/he
  was logged in as a user carrying the entitlements associated with
  the key.

  Any operations will be checked against the constraints, see
  [[*Constraints]].


**** Overview
#+BEGIN_EXAMPLE
                 +---------+
		 | creator |
                 +---------+
                     |
+------+       1 +---------+       1 +-----+
| tag  | ------- | torrent | ------- | acl |
+------+ 0..*    +---------+ 1       +-----+

+-------------+       1 +-----+       1 +--------------+
| constraints | ------- | key | ------- | entitlements |
+-------------+ 1       +-----+ 1       +--------------+


entitlement := [a-z0-9_-]+   # note: not '$'
permission := 'r' | 'w' | 'd'
ace := <entitlement> '#' <permission>
acl := <ace>+

entitlements := <entitlement>+

filter-re := [a-z0-9.*]+   # simplified regular expression
url-filter := <filter-re>+
tag := [a-z0-9_-:]+
constraints := <url-filter>* <tag>*

key := sha256(random value)

**** Creating stuff -- default ACL's and entitlements
- When creating a torrent, its creator and ACL is set to 'user:<login>#w'.

The question is: What's the 'login' when not logged in but coming in
via a key?  And the answer to that is that the user name is
'key:<secret>'.  So when creating a torrent using a key, it's
important that the ACL is extended with
f.ex. 'user:<user.creator.username>#w', if the creator of the key
should own the torrent created using the key.

- When creating a key, the entitlement is set and never changed after
  that.  This is important for tracking ownership of torrents, audit
  aside.

**** Permissions
Permission #r:
  - list/read torrent
  - read acl on torrent
Permission #w:
  - write acl on torrent (ace := entitlement carried (or "below"?))
  - tag torrent (tag := global-tag (tag:) or equal to an entitlement carried)
Permission #d:
  - delete torrent

**** Constraints
Constraints consist of zero or more url-filters and zero or more tags.

Permission to act on behalf of any of the entitlements associated to
the key is dependant on
  (i) incoming url matching ANY of the constraining url-filters
  AND
  (ii) tags on torrent match ANY of the constraining tags

**** URL space

**** Use cases
Use case #1: User U sharing torrent T with non-authenticated user
             (prereq: T has an ace 'user:<U>#w')
1. POST https://.../key   # key with 'key/' and 'user:<U>' required
        filter = 'torrent/<T>'
        entls = 'user:<U>:$self'   # note: '$self' is magic and expands to
                                   # the newly created key
   ==> K   # new key
2. POST https:/.../acl/T   # key with 'acl/T' and 'user:<U>:<K>' required
        ace = 'user:<U>:<K>#r'
   
#+END_EXAMPLE

** Web
*** Upload torrent
#+BEGIN_EXAMPLE
File: [input, path to file]
Share: [check box, default true]
Name: [input, text, optional]
Upload: [button] ==> Torrent uploaded
GET upload ==> "What's your preferred..." (upload.html)
           button: torrent_ul javaws_ul
                        \       /
			 \     / 
			  \   / (POST)
			   \ /
			 upload() [view.py]
			   /\
			  /  \
                  torrent_ul javaws_ul
			/      \
		       /        \
		      /    render launch.jnpl w/ "sessionid", "announce_url" and "apiurl"
		     /                                             |
	   render upload-torrent.html + UploadTorrent()      <share pressed>
	            |                                           /
   	      <share pressed> 				       /
	            \					      /
		     \					     /
		      ------ POST torrent/create ------------
		                       |
 			        torrent_create()
				       FIXME
		      
#+END_EXAMPLE
*** Torrent uploaded
#+BEGIN_EXAMPLE
Your torrent has been uploaded [and shared].
Your torrent: [URL] ==> Admin torrent
#+END_EXAMPLE
*** Admin torrent
TODO
*** List published torrents
TODO
* Notes
** NRKbeta and opentracker
http://search.cpan.org/dist/WWW-Opentracker-Stats/
** Playing with torrent files
On nordushare-dev, the 'bittorrent' package was installed.
*** make a torrent file
btmakemetafile FILE http://nordushare-dev.nordu.net:4711/announce
*** view a torrent file
#+BEGIN_EXAMPLE
linus@nordushare-dev:~/tmp$ btshowmetainfo FILE.torrent
btshowmetainfo 20021207 - decode BitTorrent metainfo files

metainfo file.: vmlinuz.torrent
info hash.....: fd5c5211671b261b289dfe12a1d657b898b75902
file name.....: vmlinuz
file size.....: 3907424 (14 * 262144 + 237408)
announce url..: http://nordushare-dev.nordu.net:4711/announce
#+END_EXAMPLE
** Check out
- that bit in torrents the DHT article was talking about
** Keys
https://beta.lobber.se/torrent/0b62f69a143df7708c9a0fe74a9f83b1ec4a01af.torrent?lkey=3ee568053f160f7eed0f327f92
* Progress
** For TREFpunkt [5/11]
- [X] genral constraints, with url-filter and tag-constraints
- [X] close down create_key.html
- [X] api: search (list)
- [X] api: add torrent
- [X] api: add, remove tag on torrent
- [ ] api: add, remove ace on torrent
- [ ] api: add, remove constraint on key
      /key/<key-id>/constraint/add/url/<pattern>
      /key/<key-id>/constraint/add/tag/<tag>
- [ ] api: remove torrent
- [ ] verify https://portal.nordu.net/display/nordushare/Running+a+storage+node
- [ ] audit
- [ ] add more search criterias
      - ace
** For Uutrecht
- [ ] web api
      - GET torrent/<inst>
- [X] more web: create keys
** General (also listed in Jira)
- [X] [[https://project.nordu.net/browse/LOBBERDEV-1][Federated login]]
- [ ] Send email to selected users with link to torrent file (after upload)
- [ ] http API (with ACL:s)
- [ ] remove 'nordushare' from url
- [ ] dig around in torrent file for description ("name") and more
      - s/name/notes/1 in class Torrent and store "name" from torrent
        file here.  The user can edit this field later.  The torrent
        file is stored as <hash>.torrent.
      Torrent spec: http://www.bittorrent.org/beps/bep_0003.html
** Needed for demo 2009-12-18 [8/8]
- [X] Working tracker running
- [X] Dummy page in Django
- [X] List of public, non expired torrents on start page
- Uploading torrent file
  - [X] Torrent and one Handle object is created in database
  - [X] File lands on disk
  - [X] Whitelist is updated and HUP is sent to tracker
- [X] Client is running, seeding everything in database (that hasn't expired)
- [X] _Some_ authentication
- [X] Tracker sends 4xx rather than 5xx on "not allowed"
      resulution: wontfix since that's not how it's done -- for
      tracker responses, there's "failure reason" and a new, optional
      response "warning message" which means that "the response still
      gets processed normally".
- [X] Save torrent files named as the hash of the torrent, present them in
      web as what was typed in as "name" (content-disposition?)
- [X] Send mail with links on torrent creation
** For 0.1, after 2009-12-16
- [ ] Proper DNS names
- [ ] Old torrent files are removed, from index (i.e. web page) and from whitelist
- [X] Proper Apache in front of Django
* Questions
- Should we flag the torrents as private?
* Flow
** User fills in a web form
#+BEGIN_EXAMPLE
- lobber/share/urls.py
- lobber/share/views.py (req.method != 'POST')
  render_to_response(SOME-FILE.html, lobber.share.forms.SOME-FORM)
- templ/share/SOME-FILE.html
  action=SOME-ACTION
- lobber/share/urls.py
- lobber/share/views.py (req.method == 'POST')
  if lobber.share.forms.SOME-FORM().is_valid():
#+END_EXAMPLE
     
* Operations
** Apache configuration
        <Location "/">
           SetHandler python-program
           PythonHandler django.core.handlers.modpython
           SetEnv DJANGO_SETTINGS_MODULE lobber.settings
           PythonDebug On
           PythonPath "['/home/nordushare/lobber/src'] + sys.path"

           AuthType shibboleth
           ShibRequireSession Off
           require shibboleth
           RequestHeader set X_REMOTE_USER %{eppn}e
           RequestHeader set EPPN %{eppn}e
           RequestHeader set GIVENNAME %{givenName}e
           RequestHeader set SN %{sn}e
           RequestHeader set MAIL %{mail}e
           RequestHeader set AFFILIATION %{affiliation}e
        </Location>

        <LocationMatch "Shibboleth.sso">
           SetHandler None
        </LocationMatch>

        <Location "/nordushare/login-federated/">
           AuthType shibboleth
           ShibRequireSession On
           require valid-user
        </Location>

        Alias /media /usr/share/pyshared/django/contrib/admin/media/
        Alias /jars /var/www/jars/
        Alias /css /var/www/css/
        Alias /js /var/www/js/
        # Allow indexing during development.  TODO: Remove.
        <LocationMatch "^/(jars|css|js|media)">
           Options Indexes FollowSymLinks
           Order allow,deny
           allow from all
           SetHandler None
        </LocationMatch>
* Tracker
** Correspondance
- talked to nrkbeta <knut-olav.hoven@nrk.no> 2009-09-22 about opentracker
- author: erdgeist@erdgeist.org
  <2010-04-16 Fri>
  Subject: opentracker usage and development
  --
  Hi,

  Thank's for making opentracker!  We use it in a (still internal)
  project at NORDUnet for a file sharing and storage system currently
  under development.  If we still use opentracker when we go public
  with this, we should try to arrange for you having your beer. ;-)


  We've recently added some more access control since the mmap:ed
  black/whitelist solution didn't really cut it for our needs.  In
  short, the hash of the requested torrent is looked up in an access
  list (in-memory, linked list) containting hash, permission (yes/no)
  and expiration date.  If not found (or expired), the hash is added
  to a queue (in-memory, linked list) which is handled by a separate
  thread doing an http request to resolve the permission for the
  torrent and adding an entry to the access list.

  Would you be interested in a patch?  We're currently depending on
  libcurl[0] (for http requests) and GLib-2.0[1] (for linked lists and
  queues) but I'm sure that you could remove these dependencies quite
  easily if they're problematic.

  [0] http://curl.haxx.se/libcurl/
  [1] http://library.gnome.org/devel/glib/
** debugging
printf '%s\r\n\r\n' 'GET /announce?info_hash=%2EZc%15b%BA%7F%EE%24E%E0%CB5^C2%0Bv%F22X7 HTTP/1.1' | nc localhost 4711
